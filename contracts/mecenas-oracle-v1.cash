pragma cashscript ^0.4.0;

/**
 * Mecenas Oracle (v1 - Fixed Blocks)
 *
 * (last updated: 2020.7.29)
 *
 * This contract enforces a fiat market price for daily payouts to the
 * contract's receipient.
 *
 * recipient        : party whom will will receive the payouts
 * funder           : party whom is pledging the funding for the payouts
 * oraclePk         : public key for the price oracle
 * minValidBlock    : minimum valid block (signature & message)
 * monthlyPledgeAmt : value of monthly budget (in USD cents) eg. 1,337 = $13.37
 *
 * NOTE: A minimum valid block is required to ensure the oracle's price
 *       signatures will invalidate each day, after the payout is made
 *       and a new UTXO is generated.
 *
 * NOTE: Although the pledged budget is set as a monthly value by the
 *       contract's funder, payouts are made daily to contract's receipient.
 *
 *       eg. February payouts are 1/28 or 1/29 the monthly pledge amount
 *           June payouts are 1/30 the monthly pledge amount
 *           December payouts are 1/31 the monthly pledge amount
 */
contract MecenasOracle(
    bytes20 recipient,
    bytes20 funder,
    pubkey oraclePk,
    int minValidBlock,
    int monthlyPledgeAmt,
) {
    /**
     * Payout
     *
     * Will make a payout to the receipient of the contract.
     *
     * pk        : public key of the transaction's originator
     * s         : signature of the transaction
     * oracleSig : (data / message) signature of the oracle
     * oracleMsg : payout authorization message from the oracle
     */
    function payout(pubkey pk, sig s, datasig oracleSig, bytes oracleMsg) {
        /* Validate signature of transaction's originator. */
        // NOTE: The transaction can be signed by anyone, because the money
        //       can only be sent to the recipient's registered address.
        require(checkSig(s, pk));

        /* Validate oracle's (data) signature. */
        require(checkDataSig(oracleSig, oracleMsg, oraclePk));

        /**
         * Validate that the coin is at least 24 hours old.
         *
         * NOTE: The coin's spendable time restriction is delayed by 3 hours
         *       if the caller is NOT the Oracle Bot.
         *
         *       This allows front-running by the platform's Oracle Bot, to
         *       prevent (or at least deter) the contract's abuse by
         *       "bad actors" whom may choose to gain advantage by using a
         *       valid signed message with an "optimal" exchange rate
         *       from within the past 24 hour payout period.
         *
         * TODO: In v2 of this contract, it is planned to use a "streaming"
         *       payout system. This will employ the use of `tx.locktime`
         *       which should deter the advantage gained by using "expired"
         *       Oracle signatures, as that would reduce the payout amount.
         */
        if (pk == oraclePk) {
            /* require(tx.age >= 144); */
            require(tx.age >= 0);
        } else {
            /* require(tx.age >= 162); */
            require(tx.age >= 1);
        }

        /* Set oracle-defined block height. */
        int oracleBlockHeight = int(oracleMsg.split(4)[0]);

        /* Validate minimum valid block height. */
        require(tx.time >= oracleBlockHeight);

        /* Validate minimum valid block height is greater than starting block height. */
        // NOTE: Oracle prices preceding contract creation are invalid.
        require(oracleBlockHeight >= minValidBlock);

        /* Set oracle-defined pledge amount. */
        int oraclePledgeAmt = int(oracleMsg.split(4)[1].split(4)[0]);

        /* Validate pledge amount. */
        require(oraclePledgeAmt == monthlyPledgeAmt);

        /* Set oracle-defined payout amount. */
        int oraclePayoutAmt = int(oracleMsg.split(8)[1]);

        /* Set (hardcoded) miner fee. */
        int minerFee = 1337;

        /* Retrieve the coin's value and cast it to an integer. */
        int coinValue = int(bytes(tx.value));

        /* Create an Output that sends the pledge amount to the recipient. */
        bytes34 payeeOutput = new OutputP2PKH(bytes8(oraclePayoutAmt), recipient);

        /* Calculate the coin remainder. */
        bytes8 remainder = bytes8(coinValue - oraclePayoutAmt - minerFee);

        /* Create an Output that sends the remainder back to the contract. */
        bytes32 contractOutput = new OutputP2SH(remainder, hash160(tx.bytecode));

        /* Enforce that these are the only outputs for the current transaction. */
        require(hash256(payeeOutput + contractOutput) == tx.hashOutputs);
    }

    /**
     * Reclaim
     *
     * Allows the funder to at ANYTIME reclaim their remaining pledge balance.
     *
     * NOTE: This method is NOT dependent on the operation of the Oracle.
     */
    function reclaim(pubkey pk, sig s) {
        /* Validate funder's public key. */
        require(hash160(pk) == funder);

        /* Validate funder's transaction signature. */
        require(checkSig(s, pk));
    }
}
