pragma nexscript ^0.1.0;

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Copyright (c) 2023 Ava's DAO
 * Released under the MIT License.
 *
 * ROYALTIES
 *
 * Permits an NFT creator to guarantee a specific (royalty) tax is paid
 * whenever the asset is transferred to a new UTXO.
 *
 * The royalty amount is an integer in the range from 1 (one) to
 * 10,000 (ten thousand) basis points, eg:
 *   1. 30 equals 0.30%
 *   2. 500 equals 5.00%
 *   3. 3,000 equals 30.00%
 *
 * IMPORTANT NOTE:
 *
 * This contract DOES NOT protect against "out-of-band" payments made in
 * exchange for the assets contained within.
 *
 * Asset marketplaces would be expected to honor the Royalty contract by
 * maintaining "in-band" asset transfers (incl. payouts to the asset Creator).
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * Version     : 01
 * Fingerprint : 0x00000000
 * Namespace   : PAYME01
 *
 * owner       : Party whom will receive the payouts.
 * reservation : The number of (512 second) cycles until expiration.
 *
 * For more information, please visit the following resources:
 *   - https://causes.cash
 *   - https://avasdao.org
 *
 */
contract Royalties(pubkey creator, int royalty) {
    /**
     * Transfer
     *
     * Allows an asset owner to transfer the asset, ONLY if the first
     * output is to the asset's original Creator for the required percentage
     * of the second output.
     *
     * @param owner
     * @param signature
     */
    function transfer(bytes20 owner, sig signature) {
        /* Set (token) dust value. */
        int DUST_VALUE = 546;

        /**
         * We restrict the outputs to:
         *   - 1st output is the asset (and covenant) transfer.
         *   - 2nd output is the royalty payout to the asset Creator.
         *   - 3rd output is the payment to the asset Owner.
         *   - (optional) 4th output may either be "change" or a "broker fee".
         *     NOTE: Either way, this is included in the royalty calculation.
         */
        require(tx.outputs.length <= 4);

        /* Calculate royalty output amount. */
        int royaltyOutputAmount = tx.outputs[2].value;

        /* Verify a 4th output. */
        if (tx.outputs.length == 4) {
            /* Add 4th output value to royalty outout amount. */
            royaltyOutputAmount = royaltyOutputAmount + tx.outputs[3].value;
        }

        /* Calculate royalty value (in satoshis). */
        int royalty = (royaltyOutputAmount * royalty) / 100;

        /* Verify royalty value meets dust threshold. */
        require(royalty >= DUST_VALUE);

        /* Verify that we maintain the same contract. */
        require(tx.outputs[0].lockingBytecode == this.activeBytecode);

        // NOTE: This is the asset output.
        require(tx.outputs[0].value == DUST_VALUE);

        /* Verify output meets the Minimum Royalty Payout threshold. */
        require(tx.outputs[1].value >= royalty);

        /* Verify transaction is signed by the asset owner. */
        require(checkSig(signature, owner));
    }
}
