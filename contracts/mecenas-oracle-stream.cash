pragma cashscript ^0.4.0;

/**
 * Mecenas Oracle (Streaming Blocks)
 *
 * This contract enforces a specific market price for payouts to the
 * contract's receipient.
 *
 * A minimum block is provided to ensure that the oracle price
 *
 * A message with a block number and price from after the
 * current block `tx.time` is required.
 *
 * recipient : party whom will will receive the payouts
 * funder    : party whom is pledging the funding for payouts
 * pledgeAmt : value of each payout (in USD cents) eg. 1,337 = $13.37
 *             (NOTE: budgets are monthly, however payouts are daily)
 * oraclePk  : the public key for the price oracle
 */
contract MecenasOracleStream(
    bytes20 recipient,
    bytes20 funder,
    pubkey oraclePk,
    int pledgePerBlock,
    bytes4 initialBlock
) {
    /**
     * Payout
     *
     * Will make a payout to the receipient of the contract.
     *
     * pk        : public key of the transaction's originator
     * s         : signature of the transaction
     * oracleSig : (data / message) signature of the oracle
     * oracleMsg : payout authorization message from the oracle
     */
    function payout(pubkey pk, sig s, datasig oracleSig, bytes oracleMsg) {
        /* Validate signature of transaction's originator. */
        // NOTE: The transaction can be signed by anyone, because the money
        //       can only be sent to the recipient's registered address.
        require(checkSig(s, pk));

        /* Validate oracle's (data) signature. */
        require(checkDataSig(oracleSig, oracleMsg, oraclePk));

        /* Set initial (block height). */
        int initial = int(initialBlock);

        /* Validate initial (block height). */
        require(tx.time >= initial);

        /* Set oracle-defined block height. */
        int oracleBlockHeight = int(oracleMsg.split(4)[0]);

        /* Validate minimum valid block height. */
        require(int(tx.locktime) >= oracleBlockHeight);

        /* Validate maximum valid block height. */
        // NOTE: Expect this value to be `current block height + 18`,
        //       ie. oracle signatures are valid for approx. 3 hours
        //       from the time of signing.
        require(int(tx.locktime) <= oracleBlockHeight + 18);

        /* Set oracle-defined pledge amount. */
        int oraclePledgeAmt = int(oracleMsg.split(4)[1]);

        // Pledge amount calculation is done in client, verified in contract
        // because multiplication is disabled in Bitcoin Script.
        // We do an extra modulo check to verify correctness of the division
        int passedBlocks = int(tx.locktime) - initial;
        require(oraclePledgeAmt / passedBlocks == pledgePerBlock);
        require(oraclePledgeAmt % passedBlocks == 0);

        /**
         * (New Contract) Constructor
         *
         * 1. Cut out old initialBlock (OP_PUSHBYTES_4 <initialBlock>)
         * 2. Insert new initialBlock (OP_PUSHBYTES_4 <tx.locktime>)
         *
         * NOTE: Constructor parameters are added in reverse order, so
         *       `initialBlock` is actually the first statement in the
         *       contract's bytecode.
         */
        bytes constructor = 0x04 + tx.locktime + tx.bytecode.split(5)[1];

        /* Initialize new contract. */
        bytes20 newContract = hash160(constructor);

        /* Set (hardcoded) miner fee. */
        int minerFee = 1000;

        /* Calculate payout amount. */
        bytes8 payoutAmt = bytes8(oraclePledgeAmt);

        /* Retrieve the coin's value and cast it to an integer. */
        int coinValue = int(bytes(tx.value));

        /* Calculate the coin's remaining value. */
        bytes8 remainder = bytes8(coinValue - oraclePledgeAmt - minerFee);

        /* Create an Output that sends the pledge amount to the recipient. */
        bytes34 payeeOutput = new OutputP2PKH(payoutAmt, recipient);

        /* Create an Output that sends the remainder to the NEW contract. */
        bytes32 contractOutput = new OutputP2SH(remainder, newContract);

        /* Enforce that these are the ONLY outputs for the transaction. */
        require(hash256(payeeOutput + contractOutput) == tx.hashOutputs);
    }

    /**
     * Reclaim
     *
     * Allows the funder to AT ANYTIME reclaim their remaining pledge(s).
     *
     * NOTE: This method is NOT dependent on the operation of the Oracle.
     */
    function reclaim(pubkey pk, sig s) {
        /* Validate funder's public key. */
        require(hash160(pk) == funder);

        /* Validate funder's transaction signature. */
        require(checkSig(s, pk));
    }
}
