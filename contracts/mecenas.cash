pragma cashscript ^0.4.0;

/**
 * Mecenas
 */
contract Mecenas(
    bytes20 recipient,
    bytes20 funder,
    int pledge
) {
    // Allow the receiver to claim their monthly pledge amount
    function receive(pubkey pk, sig s) {
        // The transaction can be signed by anyone, because the money can only
        // be sent to the correct address
        require(checkSig(s, pk));

        // Check that the UTXO is at least 30 days old
        require(tx.age >= 30 days);

        // Use a hardcoded miner fee
        int minerFee = 1000;

        // Retrieve the UTXO's value and cast it to an integer
        int intValue = int(bytes(tx.value));

        // Check if the UTXO's value is higher than the pledge amount + minerFee
        if (intValue <= pledge + minerFee) {
            // Create an Output that sends the remaining balance to the recipient
            bytes34 out1 = new OutputP2PKH(bytes8(intValue - minerFee), recipient);

            // Enforce that this is the only output for the current transaction
            require(hash256(out1) == tx.hashOutputs);
        } else {
            // Create an Output that sends the pledge amount to the recipient
            bytes34 out1 = new OutputP2PKH(bytes8(pledge), recipient);

            // Create an Output that sends the remainder back to the contract
            bytes8 remainder = bytes8(intValue - pledge - minerFee);
            bytes32 out2 = new OutputP2SH(remainder, hash160(tx.bytecode));

            // Enforce that these are the only outputs for the current transaction
            require(hash256(out1 + out2) == tx.hashOutputs);
        }
    }

    // Allow the funder to reclaim their remaining pledges
    function reclaim(pubkey pk, sig s) {
        require(hash160(pk) == funder);
        require(checkSig(s, pk));
    }
}
